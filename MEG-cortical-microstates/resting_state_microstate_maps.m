function resting_state_microstate_maps()
% Function to run the analysis to obtain the results in section 3.2 of the
% main text.

global subject_IDs
global data_dir


%% Estimate maps
% Use 5000 GFP peaks from scan 1 of each participant to estimate microstate
% maps. 

c = microstate.cohort ; % initialize microstate cohort

for i = 1:length(subject_IDs)
    
    % load the source data
    cfg = struct ; 
    cfg.datafile = sprintf('%s/MEG-rest/sub%s-rest-1.edf',data_dir,subject_IDs{i}) ; 
    source = ft_preprocessing(cfg) ; 
    
        
    % get the bad samples
    artfctdef = jsondecode(fileread(sprintf('%s/MEG-rest/Artifacts/artfct-sub%s-rest-1.json',data_dir,subject_IDs{i}))) ; 
    bad_samples = [] ; 
    for mth = {'clip','jump','zscore'}
        for j = 1:size(artfctdef.(mth{1}).artifact,1)
            bad_samples = [bad_samples , (artfctdef.(mth{1}).artifact(j,1)-5):(artfctdef.(mth{1}).artifact(j,2)+5)] ; 
        end
    end
    bad_samples = unique(bad_samples) ; 
        
    % make a microstate object
    ms = microstate.individual(source.trial{1}','source',source.time{1}) ; % make microstate individual object
    ms = ms.add_bad_samples(bad_samples) ; 
    clear source
        
    % add 5000 GFP peaks from the microstate object to the cohort
    c = c.add_individuals(ms,[],5000) ; 
        
end
    
% Perform global microstate clustering
[c,kopt,kvec,maps,gev] = c.cluster_globalkoptimum('kvec',2:40) ; 

% Plot Fig 2A
figure('Name','Figure 2A','NumberTitle','off') ; 
plot(kvec,gev,'k') ; 
hold on
plot(kopt,gev(kvec==kopt),'+r')
set(gca,'XTick',kvec) ; 
xlabel('k')
ylabel('GEV')
grid on

%% Backfit to full time courses across both scans
    
c = microstate.cohort ; % initialize microstate cohort

for i = 1:length(subject_IDs)
    for scan = 1:2
        
        % load the source data
        cfg = struct ; 
        cfg.datafile = sprintf('%s/MEG-rest/sub%s-rest-%d.edf',data_dir,subject_IDs{i},scan) ; 
        source = ft_preprocessing(cfg) ;

        % make a microstate object
        ms = microstate.individual(source.trial{1}','source',source.time{1}) ; % make microstate individual object 
        clear source
        
        % Backfit maps to the data
        ms.maps = maps{kvec == kopt} ; 
        ms = ms.cluster_alignmaps ; 
        
        % Calculate statistics (including GEV)
        ms = ms.stats_all ; 
        
        % add the microstate object to the cohort
        c = c.add_individuals(ms,sprintf('scan%d',scan)) ; 
        
    end
end
 
% Collate stats for cohort
c = c.cohort_stats ; 

% Plot Figure 2B
% Note that old versions of +microstate used violin plots as in the
% manuscript, but more recent versions replace this with a box plot, so if
% you're running the most recent version you might find this plot looks
% different to the manuscript
figure('Name','Figure 2B','NumberTitle','off') ; 
c.plot('gev') ;
xlabel('Scan #')
ylabel(sprintf('GEV (k=%d)',kopt))

cohort = c ; 
save('cluster_output','cohort','gev','kopt','kvec','maps')

% Note: this file from our is accessible in the toolbox as
% /tutorials/tutorial2_RestingSource_Group/cluster_globalkoptimum_output
% (although variable names have been changed slightly)

%% Plot Figure 2C
    
figure('Name','Figure 2C','NumberTitle','off') ; 

% Load the layout file for plotting on the cortical surface. This layout
% file was generated by called microstate.functions.layout_creator, and is
% available in the toolbox as /tutorials/tutorial5_Chi2_Stimulus_Response
lay = load('layout.mat') ; 

% Note we used a slightly different cortical surface in the manuscript, but
% here we will use the one implemented in +microstate. Codes are the same.
cohort.globalmaps = cohort.individual(1).maps ; 
cohort.plot('globalmaps',lay,'cscale',[0.5,1]) ; 


end